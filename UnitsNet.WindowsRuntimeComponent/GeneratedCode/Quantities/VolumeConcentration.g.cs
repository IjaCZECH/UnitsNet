//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The volume concentration (not to be confused with volume fraction) is defined as the volume of a constituent divided by the total volume of the mixture.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Concentration#Volume_concentration
    /// </remarks>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class VolumeConcentration : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly decimal _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeConcentrationUnit? _unit;

        static VolumeConcentration()
        {
            BaseDimensions = BaseDimensions.Dimensionless;
            Info = new QuantityInfo(QuantityType.VolumeConcentration, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit DecimalFraction.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public VolumeConcentration()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private VolumeConcentration(decimal value, VolumeConcentrationUnit unit)
        {
            if(unit == VolumeConcentrationUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = value;
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of VolumeConcentration, which is DecimalFraction. All conversions go via this value.
        /// </summary>
        public static VolumeConcentrationUnit BaseUnit { get; } = VolumeConcentrationUnit.DecimalFraction;

        /// <summary>
        /// Represents the largest possible value of VolumeConcentration
        /// </summary>
        public static VolumeConcentration MaxValue { get; } = new VolumeConcentration(decimal.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of VolumeConcentration
        /// </summary>
        public static VolumeConcentration MinValue { get; } = new VolumeConcentration(decimal.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.VolumeConcentration;

        /// <summary>
        ///     All units of measurement for the VolumeConcentration quantity.
        /// </summary>
        public static VolumeConcentrationUnit[] Units { get; } = Enum.GetValues(typeof(VolumeConcentrationUnit)).Cast<VolumeConcentrationUnit>().Except(new VolumeConcentrationUnit[]{ VolumeConcentrationUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit DecimalFraction.
        /// </summary>
        public static VolumeConcentration Zero { get; } = new VolumeConcentration(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public decimal Value => Convert.ToDecimal(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public VolumeConcentrationUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => VolumeConcentration.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => VolumeConcentration.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get VolumeConcentration in CentilitersPerLiter.
        /// </summary>
        public decimal CentilitersPerLiter => As(VolumeConcentrationUnit.CentilitersPerLiter);

        /// <summary>
        ///     Get VolumeConcentration in CentilitersPerMililiter.
        /// </summary>
        public decimal CentilitersPerMililiter => As(VolumeConcentrationUnit.CentilitersPerMililiter);

        /// <summary>
        ///     Get VolumeConcentration in DecilitersPerLiter.
        /// </summary>
        public decimal DecilitersPerLiter => As(VolumeConcentrationUnit.DecilitersPerLiter);

        /// <summary>
        ///     Get VolumeConcentration in DecilitersPerMililiter.
        /// </summary>
        public decimal DecilitersPerMililiter => As(VolumeConcentrationUnit.DecilitersPerMililiter);

        /// <summary>
        ///     Get VolumeConcentration in DecimalFractions.
        /// </summary>
        public decimal DecimalFractions => As(VolumeConcentrationUnit.DecimalFraction);

        /// <summary>
        ///     Get VolumeConcentration in LitersPerLiter.
        /// </summary>
        public decimal LitersPerLiter => As(VolumeConcentrationUnit.LitersPerLiter);

        /// <summary>
        ///     Get VolumeConcentration in LitersPerMililiter.
        /// </summary>
        public decimal LitersPerMililiter => As(VolumeConcentrationUnit.LitersPerMililiter);

        /// <summary>
        ///     Get VolumeConcentration in MicrolitersPerLiter.
        /// </summary>
        public decimal MicrolitersPerLiter => As(VolumeConcentrationUnit.MicrolitersPerLiter);

        /// <summary>
        ///     Get VolumeConcentration in MicrolitersPerMililiter.
        /// </summary>
        public decimal MicrolitersPerMililiter => As(VolumeConcentrationUnit.MicrolitersPerMililiter);

        /// <summary>
        ///     Get VolumeConcentration in MillilitersPerLiter.
        /// </summary>
        public decimal MillilitersPerLiter => As(VolumeConcentrationUnit.MillilitersPerLiter);

        /// <summary>
        ///     Get VolumeConcentration in MillilitersPerMililiter.
        /// </summary>
        public decimal MillilitersPerMililiter => As(VolumeConcentrationUnit.MillilitersPerMililiter);

        /// <summary>
        ///     Get VolumeConcentration in NanolitersPerLiter.
        /// </summary>
        public decimal NanolitersPerLiter => As(VolumeConcentrationUnit.NanolitersPerLiter);

        /// <summary>
        ///     Get VolumeConcentration in NanolitersPerMililiter.
        /// </summary>
        public decimal NanolitersPerMililiter => As(VolumeConcentrationUnit.NanolitersPerMililiter);

        /// <summary>
        ///     Get VolumeConcentration in PartsPerBillion.
        /// </summary>
        public decimal PartsPerBillion => As(VolumeConcentrationUnit.PartPerBillion);

        /// <summary>
        ///     Get VolumeConcentration in PartsPerMillion.
        /// </summary>
        public decimal PartsPerMillion => As(VolumeConcentrationUnit.PartPerMillion);

        /// <summary>
        ///     Get VolumeConcentration in PartsPerThousand.
        /// </summary>
        public decimal PartsPerThousand => As(VolumeConcentrationUnit.PartPerThousand);

        /// <summary>
        ///     Get VolumeConcentration in PartsPerTrillion.
        /// </summary>
        public decimal PartsPerTrillion => As(VolumeConcentrationUnit.PartPerTrillion);

        /// <summary>
        ///     Get VolumeConcentration in Percent.
        /// </summary>
        public decimal Percent => As(VolumeConcentrationUnit.Percent);

        /// <summary>
        ///     Get VolumeConcentration in PicolitersPerLiter.
        /// </summary>
        public decimal PicolitersPerLiter => As(VolumeConcentrationUnit.PicolitersPerLiter);

        /// <summary>
        ///     Get VolumeConcentration in PicolitersPerMililiter.
        /// </summary>
        public decimal PicolitersPerMililiter => As(VolumeConcentrationUnit.PicolitersPerMililiter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumeConcentrationUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(VolumeConcentrationUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get VolumeConcentration from CentilitersPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromCentilitersPerLiter(decimal centilitersperliter)
        {
            decimal value = (decimal) centilitersperliter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.CentilitersPerLiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from CentilitersPerMililiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromCentilitersPerMililiter(decimal centiliterspermililiter)
        {
            decimal value = (decimal) centiliterspermililiter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.CentilitersPerMililiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from DecilitersPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromDecilitersPerLiter(decimal decilitersperliter)
        {
            decimal value = (decimal) decilitersperliter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.DecilitersPerLiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from DecilitersPerMililiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromDecilitersPerMililiter(decimal deciliterspermililiter)
        {
            decimal value = (decimal) deciliterspermililiter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.DecilitersPerMililiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from DecimalFractions.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromDecimalFractions(decimal decimalfractions)
        {
            decimal value = (decimal) decimalfractions;
            return new VolumeConcentration(value, VolumeConcentrationUnit.DecimalFraction);
        }
        /// <summary>
        ///     Get VolumeConcentration from LitersPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromLitersPerLiter(decimal litersperliter)
        {
            decimal value = (decimal) litersperliter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.LitersPerLiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from LitersPerMililiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromLitersPerMililiter(decimal literspermililiter)
        {
            decimal value = (decimal) literspermililiter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.LitersPerMililiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from MicrolitersPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromMicrolitersPerLiter(decimal microlitersperliter)
        {
            decimal value = (decimal) microlitersperliter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.MicrolitersPerLiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from MicrolitersPerMililiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromMicrolitersPerMililiter(decimal microliterspermililiter)
        {
            decimal value = (decimal) microliterspermililiter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.MicrolitersPerMililiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from MillilitersPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromMillilitersPerLiter(decimal millilitersperliter)
        {
            decimal value = (decimal) millilitersperliter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.MillilitersPerLiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from MillilitersPerMililiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromMillilitersPerMililiter(decimal milliliterspermililiter)
        {
            decimal value = (decimal) milliliterspermililiter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.MillilitersPerMililiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from NanolitersPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromNanolitersPerLiter(decimal nanolitersperliter)
        {
            decimal value = (decimal) nanolitersperliter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.NanolitersPerLiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from NanolitersPerMililiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromNanolitersPerMililiter(decimal nanoliterspermililiter)
        {
            decimal value = (decimal) nanoliterspermililiter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.NanolitersPerMililiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from PartsPerBillion.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromPartsPerBillion(decimal partsperbillion)
        {
            decimal value = (decimal) partsperbillion;
            return new VolumeConcentration(value, VolumeConcentrationUnit.PartPerBillion);
        }
        /// <summary>
        ///     Get VolumeConcentration from PartsPerMillion.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromPartsPerMillion(decimal partspermillion)
        {
            decimal value = (decimal) partspermillion;
            return new VolumeConcentration(value, VolumeConcentrationUnit.PartPerMillion);
        }
        /// <summary>
        ///     Get VolumeConcentration from PartsPerThousand.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromPartsPerThousand(decimal partsperthousand)
        {
            decimal value = (decimal) partsperthousand;
            return new VolumeConcentration(value, VolumeConcentrationUnit.PartPerThousand);
        }
        /// <summary>
        ///     Get VolumeConcentration from PartsPerTrillion.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromPartsPerTrillion(decimal partspertrillion)
        {
            decimal value = (decimal) partspertrillion;
            return new VolumeConcentration(value, VolumeConcentrationUnit.PartPerTrillion);
        }
        /// <summary>
        ///     Get VolumeConcentration from Percent.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromPercent(decimal percent)
        {
            decimal value = (decimal) percent;
            return new VolumeConcentration(value, VolumeConcentrationUnit.Percent);
        }
        /// <summary>
        ///     Get VolumeConcentration from PicolitersPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromPicolitersPerLiter(decimal picolitersperliter)
        {
            decimal value = (decimal) picolitersperliter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.PicolitersPerLiter);
        }
        /// <summary>
        ///     Get VolumeConcentration from PicolitersPerMililiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeConcentration FromPicolitersPerMililiter(decimal picoliterspermililiter)
        {
            decimal value = (decimal) picoliterspermililiter;
            return new VolumeConcentration(value, VolumeConcentrationUnit.PicolitersPerMililiter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeConcentrationUnit" /> to <see cref="VolumeConcentration" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumeConcentration unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static VolumeConcentration From(decimal value, VolumeConcentrationUnit fromUnit)
        {
            return new VolumeConcentration((decimal)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static VolumeConcentration Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static VolumeConcentration Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<VolumeConcentration, VolumeConcentrationUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out VolumeConcentration result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out VolumeConcentration result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<VolumeConcentration, VolumeConcentrationUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeConcentrationUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static VolumeConcentrationUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<VolumeConcentrationUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out VolumeConcentrationUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out VolumeConcentrationUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<VolumeConcentrationUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is VolumeConcentration objVolumeConcentration)) throw new ArgumentException("Expected type VolumeConcentration.", nameof(obj));

            return CompareTo(objVolumeConcentration);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(VolumeConcentration other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is VolumeConcentration objVolumeConcentration))
                return false;

            return Equals(objVolumeConcentration);
        }

        public bool Equals(VolumeConcentration other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another VolumeConcentration within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(VolumeConcentration other, decimal tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            decimal thisValue = (decimal)this.Value;
            decimal otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current VolumeConcentration.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        decimal IQuantity.As(object unit) => As((VolumeConcentrationUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public decimal As(VolumeConcentrationUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDecimal(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDecimal(converted);
        }

        /// <summary>
        ///     Converts this VolumeConcentration to another VolumeConcentration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A VolumeConcentration with the specified unit.</returns>
        public VolumeConcentration ToUnit(VolumeConcentrationUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new VolumeConcentration(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private decimal AsBaseUnit()
        {
            switch(Unit)
            {
                case VolumeConcentrationUnit.CentilitersPerLiter: return (_value) * 1e-2m;
                case VolumeConcentrationUnit.CentilitersPerMililiter: return (_value/1e-3m) * 1e-2m;
                case VolumeConcentrationUnit.DecilitersPerLiter: return (_value) * 1e-1m;
                case VolumeConcentrationUnit.DecilitersPerMililiter: return (_value/1e-3m) * 1e-1m;
                case VolumeConcentrationUnit.DecimalFraction: return _value;
                case VolumeConcentrationUnit.LitersPerLiter: return _value;
                case VolumeConcentrationUnit.LitersPerMililiter: return _value/1e-3m;
                case VolumeConcentrationUnit.MicrolitersPerLiter: return (_value) * 1e-6m;
                case VolumeConcentrationUnit.MicrolitersPerMililiter: return (_value/1e-3m) * 1e-6m;
                case VolumeConcentrationUnit.MillilitersPerLiter: return (_value) * 1e-3m;
                case VolumeConcentrationUnit.MillilitersPerMililiter: return (_value/1e-3m) * 1e-3m;
                case VolumeConcentrationUnit.NanolitersPerLiter: return (_value) * 1e-9m;
                case VolumeConcentrationUnit.NanolitersPerMililiter: return (_value/1e-3m) * 1e-9m;
                case VolumeConcentrationUnit.PartPerBillion: return _value/1e9m;
                case VolumeConcentrationUnit.PartPerMillion: return _value/1e6m;
                case VolumeConcentrationUnit.PartPerThousand: return _value/1e3m;
                case VolumeConcentrationUnit.PartPerTrillion: return _value/1e12m;
                case VolumeConcentrationUnit.Percent: return _value/1e2m;
                case VolumeConcentrationUnit.PicolitersPerLiter: return (_value) * 1e-12m;
                case VolumeConcentrationUnit.PicolitersPerMililiter: return (_value/1e-3m) * 1e-12m;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private decimal AsBaseNumericType(VolumeConcentrationUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case VolumeConcentrationUnit.CentilitersPerLiter: return (baseUnitValue) / 1e-2m;
                case VolumeConcentrationUnit.CentilitersPerMililiter: return (baseUnitValue*1e-3m) / 1e-2m;
                case VolumeConcentrationUnit.DecilitersPerLiter: return (baseUnitValue) / 1e-1m;
                case VolumeConcentrationUnit.DecilitersPerMililiter: return (baseUnitValue*1e-3m) / 1e-1m;
                case VolumeConcentrationUnit.DecimalFraction: return baseUnitValue;
                case VolumeConcentrationUnit.LitersPerLiter: return baseUnitValue;
                case VolumeConcentrationUnit.LitersPerMililiter: return baseUnitValue*1e-3m;
                case VolumeConcentrationUnit.MicrolitersPerLiter: return (baseUnitValue) / 1e-6m;
                case VolumeConcentrationUnit.MicrolitersPerMililiter: return (baseUnitValue*1e-3m) / 1e-6m;
                case VolumeConcentrationUnit.MillilitersPerLiter: return (baseUnitValue) / 1e-3m;
                case VolumeConcentrationUnit.MillilitersPerMililiter: return (baseUnitValue*1e-3m) / 1e-3m;
                case VolumeConcentrationUnit.NanolitersPerLiter: return (baseUnitValue) / 1e-9m;
                case VolumeConcentrationUnit.NanolitersPerMililiter: return (baseUnitValue*1e-3m) / 1e-9m;
                case VolumeConcentrationUnit.PartPerBillion: return baseUnitValue*1e9m;
                case VolumeConcentrationUnit.PartPerMillion: return baseUnitValue*1e6m;
                case VolumeConcentrationUnit.PartPerThousand: return baseUnitValue*1e3m;
                case VolumeConcentrationUnit.PartPerTrillion: return baseUnitValue*1e12m;
                case VolumeConcentrationUnit.Percent: return baseUnitValue*1e2m;
                case VolumeConcentrationUnit.PicolitersPerLiter: return (baseUnitValue) / 1e-12m;
                case VolumeConcentrationUnit.PicolitersPerMililiter: return (baseUnitValue*1e-3m) / 1e-12m;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDecimal(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDecimal(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}

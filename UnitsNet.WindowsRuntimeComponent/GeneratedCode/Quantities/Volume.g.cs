//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Volume : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly decimal _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeUnit? _unit;

        static Volume()
        {
            BaseDimensions = new BaseDimensions(3, 0, 0, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Volume, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit CubicMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Volume()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Volume(decimal value, VolumeUnit unit)
        {
            if(unit == VolumeUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = value;
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Volume, which is CubicMeter. All conversions go via this value.
        /// </summary>
        public static VolumeUnit BaseUnit { get; } = VolumeUnit.CubicMeter;

        /// <summary>
        /// Represents the largest possible value of Volume
        /// </summary>
        public static Volume MaxValue { get; } = new Volume(decimal.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Volume
        /// </summary>
        public static Volume MinValue { get; } = new Volume(decimal.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Volume;

        /// <summary>
        ///     All units of measurement for the Volume quantity.
        /// </summary>
        public static VolumeUnit[] Units { get; } = Enum.GetValues(typeof(VolumeUnit)).Cast<VolumeUnit>().Except(new VolumeUnit[]{ VolumeUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeter.
        /// </summary>
        public static Volume Zero { get; } = new Volume(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public decimal Value => Convert.ToDecimal(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public VolumeUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Volume.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Volume.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Volume in AcreFeet.
        /// </summary>
        public decimal AcreFeet => As(VolumeUnit.AcreFoot);

        /// <summary>
        ///     Get Volume in AuTablespoons.
        /// </summary>
        public decimal AuTablespoons => As(VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Get Volume in BoardFeet.
        /// </summary>
        public decimal BoardFeet => As(VolumeUnit.BoardFoot);

        /// <summary>
        ///     Get Volume in Centiliters.
        /// </summary>
        public decimal Centiliters => As(VolumeUnit.Centiliter);

        /// <summary>
        ///     Get Volume in CubicCentimeters.
        /// </summary>
        public decimal CubicCentimeters => As(VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Get Volume in CubicDecimeters.
        /// </summary>
        public decimal CubicDecimeters => As(VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Get Volume in CubicFeet.
        /// </summary>
        public decimal CubicFeet => As(VolumeUnit.CubicFoot);

        /// <summary>
        ///     Get Volume in CubicHectometers.
        /// </summary>
        public decimal CubicHectometers => As(VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Get Volume in CubicInches.
        /// </summary>
        public decimal CubicInches => As(VolumeUnit.CubicInch);

        /// <summary>
        ///     Get Volume in CubicKilometers.
        /// </summary>
        public decimal CubicKilometers => As(VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Get Volume in CubicMeters.
        /// </summary>
        public decimal CubicMeters => As(VolumeUnit.CubicMeter);

        /// <summary>
        ///     Get Volume in CubicMicrometers.
        /// </summary>
        public decimal CubicMicrometers => As(VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Get Volume in CubicMiles.
        /// </summary>
        public decimal CubicMiles => As(VolumeUnit.CubicMile);

        /// <summary>
        ///     Get Volume in CubicMillimeters.
        /// </summary>
        public decimal CubicMillimeters => As(VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Get Volume in CubicYards.
        /// </summary>
        public decimal CubicYards => As(VolumeUnit.CubicYard);

        /// <summary>
        ///     Get Volume in DecausGallons.
        /// </summary>
        public decimal DecausGallons => As(VolumeUnit.DecausGallon);

        /// <summary>
        ///     Get Volume in Deciliters.
        /// </summary>
        public decimal Deciliters => As(VolumeUnit.Deciliter);

        /// <summary>
        ///     Get Volume in DeciusGallons.
        /// </summary>
        public decimal DeciusGallons => As(VolumeUnit.DeciusGallon);

        /// <summary>
        ///     Get Volume in HectocubicFeet.
        /// </summary>
        public decimal HectocubicFeet => As(VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Get Volume in HectocubicMeters.
        /// </summary>
        public decimal HectocubicMeters => As(VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Get Volume in Hectoliters.
        /// </summary>
        public decimal Hectoliters => As(VolumeUnit.Hectoliter);

        /// <summary>
        ///     Get Volume in HectousGallons.
        /// </summary>
        public decimal HectousGallons => As(VolumeUnit.HectousGallon);

        /// <summary>
        ///     Get Volume in ImperialBeerBarrels.
        /// </summary>
        public decimal ImperialBeerBarrels => As(VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Get Volume in ImperialGallons.
        /// </summary>
        public decimal ImperialGallons => As(VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Get Volume in ImperialOunces.
        /// </summary>
        public decimal ImperialOunces => As(VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Get Volume in ImperialPints.
        /// </summary>
        public decimal ImperialPints => As(VolumeUnit.ImperialPint);

        /// <summary>
        ///     Get Volume in KilocubicFeet.
        /// </summary>
        public decimal KilocubicFeet => As(VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Get Volume in KilocubicMeters.
        /// </summary>
        public decimal KilocubicMeters => As(VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Get Volume in KiloimperialGallons.
        /// </summary>
        public decimal KiloimperialGallons => As(VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Get Volume in Kiloliters.
        /// </summary>
        public decimal Kiloliters => As(VolumeUnit.Kiloliter);

        /// <summary>
        ///     Get Volume in KilousGallons.
        /// </summary>
        public decimal KilousGallons => As(VolumeUnit.KilousGallon);

        /// <summary>
        ///     Get Volume in Liters.
        /// </summary>
        public decimal Liters => As(VolumeUnit.Liter);

        /// <summary>
        ///     Get Volume in MegacubicFeet.
        /// </summary>
        public decimal MegacubicFeet => As(VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Get Volume in MegaimperialGallons.
        /// </summary>
        public decimal MegaimperialGallons => As(VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Get Volume in Megaliters.
        /// </summary>
        public decimal Megaliters => As(VolumeUnit.Megaliter);

        /// <summary>
        ///     Get Volume in MegausGallons.
        /// </summary>
        public decimal MegausGallons => As(VolumeUnit.MegausGallon);

        /// <summary>
        ///     Get Volume in MetricCups.
        /// </summary>
        public decimal MetricCups => As(VolumeUnit.MetricCup);

        /// <summary>
        ///     Get Volume in MetricTeaspoons.
        /// </summary>
        public decimal MetricTeaspoons => As(VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Get Volume in Microliters.
        /// </summary>
        public decimal Microliters => As(VolumeUnit.Microliter);

        /// <summary>
        ///     Get Volume in Milliliters.
        /// </summary>
        public decimal Milliliters => As(VolumeUnit.Milliliter);

        /// <summary>
        ///     Get Volume in OilBarrels.
        /// </summary>
        public decimal OilBarrels => As(VolumeUnit.OilBarrel);

        /// <summary>
        ///     Get Volume in UkTablespoons.
        /// </summary>
        public decimal UkTablespoons => As(VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Get Volume in UsBeerBarrels.
        /// </summary>
        public decimal UsBeerBarrels => As(VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Get Volume in UsCustomaryCups.
        /// </summary>
        public decimal UsCustomaryCups => As(VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Get Volume in UsGallons.
        /// </summary>
        public decimal UsGallons => As(VolumeUnit.UsGallon);

        /// <summary>
        ///     Get Volume in UsLegalCups.
        /// </summary>
        public decimal UsLegalCups => As(VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Get Volume in UsOunces.
        /// </summary>
        public decimal UsOunces => As(VolumeUnit.UsOunce);

        /// <summary>
        ///     Get Volume in UsPints.
        /// </summary>
        public decimal UsPints => As(VolumeUnit.UsPint);

        /// <summary>
        ///     Get Volume in UsQuarts.
        /// </summary>
        public decimal UsQuarts => As(VolumeUnit.UsQuart);

        /// <summary>
        ///     Get Volume in UsTablespoons.
        /// </summary>
        public decimal UsTablespoons => As(VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Get Volume in UsTeaspoons.
        /// </summary>
        public decimal UsTeaspoons => As(VolumeUnit.UsTeaspoon);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumeUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(VolumeUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Volume from AcreFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromAcreFeet(decimal acrefeet)
        {
            decimal value = (decimal) acrefeet;
            return new Volume(value, VolumeUnit.AcreFoot);
        }
        /// <summary>
        ///     Get Volume from AuTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromAuTablespoons(decimal autablespoons)
        {
            decimal value = (decimal) autablespoons;
            return new Volume(value, VolumeUnit.AuTablespoon);
        }
        /// <summary>
        ///     Get Volume from BoardFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromBoardFeet(decimal boardfeet)
        {
            decimal value = (decimal) boardfeet;
            return new Volume(value, VolumeUnit.BoardFoot);
        }
        /// <summary>
        ///     Get Volume from Centiliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCentiliters(decimal centiliters)
        {
            decimal value = (decimal) centiliters;
            return new Volume(value, VolumeUnit.Centiliter);
        }
        /// <summary>
        ///     Get Volume from CubicCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicCentimeters(decimal cubiccentimeters)
        {
            decimal value = (decimal) cubiccentimeters;
            return new Volume(value, VolumeUnit.CubicCentimeter);
        }
        /// <summary>
        ///     Get Volume from CubicDecimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicDecimeters(decimal cubicdecimeters)
        {
            decimal value = (decimal) cubicdecimeters;
            return new Volume(value, VolumeUnit.CubicDecimeter);
        }
        /// <summary>
        ///     Get Volume from CubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicFeet(decimal cubicfeet)
        {
            decimal value = (decimal) cubicfeet;
            return new Volume(value, VolumeUnit.CubicFoot);
        }
        /// <summary>
        ///     Get Volume from CubicHectometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicHectometers(decimal cubichectometers)
        {
            decimal value = (decimal) cubichectometers;
            return new Volume(value, VolumeUnit.CubicHectometer);
        }
        /// <summary>
        ///     Get Volume from CubicInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicInches(decimal cubicinches)
        {
            decimal value = (decimal) cubicinches;
            return new Volume(value, VolumeUnit.CubicInch);
        }
        /// <summary>
        ///     Get Volume from CubicKilometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicKilometers(decimal cubickilometers)
        {
            decimal value = (decimal) cubickilometers;
            return new Volume(value, VolumeUnit.CubicKilometer);
        }
        /// <summary>
        ///     Get Volume from CubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMeters(decimal cubicmeters)
        {
            decimal value = (decimal) cubicmeters;
            return new Volume(value, VolumeUnit.CubicMeter);
        }
        /// <summary>
        ///     Get Volume from CubicMicrometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMicrometers(decimal cubicmicrometers)
        {
            decimal value = (decimal) cubicmicrometers;
            return new Volume(value, VolumeUnit.CubicMicrometer);
        }
        /// <summary>
        ///     Get Volume from CubicMiles.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMiles(decimal cubicmiles)
        {
            decimal value = (decimal) cubicmiles;
            return new Volume(value, VolumeUnit.CubicMile);
        }
        /// <summary>
        ///     Get Volume from CubicMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMillimeters(decimal cubicmillimeters)
        {
            decimal value = (decimal) cubicmillimeters;
            return new Volume(value, VolumeUnit.CubicMillimeter);
        }
        /// <summary>
        ///     Get Volume from CubicYards.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicYards(decimal cubicyards)
        {
            decimal value = (decimal) cubicyards;
            return new Volume(value, VolumeUnit.CubicYard);
        }
        /// <summary>
        ///     Get Volume from DecausGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDecausGallons(decimal decausgallons)
        {
            decimal value = (decimal) decausgallons;
            return new Volume(value, VolumeUnit.DecausGallon);
        }
        /// <summary>
        ///     Get Volume from Deciliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDeciliters(decimal deciliters)
        {
            decimal value = (decimal) deciliters;
            return new Volume(value, VolumeUnit.Deciliter);
        }
        /// <summary>
        ///     Get Volume from DeciusGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDeciusGallons(decimal deciusgallons)
        {
            decimal value = (decimal) deciusgallons;
            return new Volume(value, VolumeUnit.DeciusGallon);
        }
        /// <summary>
        ///     Get Volume from HectocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectocubicFeet(decimal hectocubicfeet)
        {
            decimal value = (decimal) hectocubicfeet;
            return new Volume(value, VolumeUnit.HectocubicFoot);
        }
        /// <summary>
        ///     Get Volume from HectocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectocubicMeters(decimal hectocubicmeters)
        {
            decimal value = (decimal) hectocubicmeters;
            return new Volume(value, VolumeUnit.HectocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Hectoliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectoliters(decimal hectoliters)
        {
            decimal value = (decimal) hectoliters;
            return new Volume(value, VolumeUnit.Hectoliter);
        }
        /// <summary>
        ///     Get Volume from HectousGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectousGallons(decimal hectousgallons)
        {
            decimal value = (decimal) hectousgallons;
            return new Volume(value, VolumeUnit.HectousGallon);
        }
        /// <summary>
        ///     Get Volume from ImperialBeerBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialBeerBarrels(decimal imperialbeerbarrels)
        {
            decimal value = (decimal) imperialbeerbarrels;
            return new Volume(value, VolumeUnit.ImperialBeerBarrel);
        }
        /// <summary>
        ///     Get Volume from ImperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialGallons(decimal imperialgallons)
        {
            decimal value = (decimal) imperialgallons;
            return new Volume(value, VolumeUnit.ImperialGallon);
        }
        /// <summary>
        ///     Get Volume from ImperialOunces.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialOunces(decimal imperialounces)
        {
            decimal value = (decimal) imperialounces;
            return new Volume(value, VolumeUnit.ImperialOunce);
        }
        /// <summary>
        ///     Get Volume from ImperialPints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialPints(decimal imperialpints)
        {
            decimal value = (decimal) imperialpints;
            return new Volume(value, VolumeUnit.ImperialPint);
        }
        /// <summary>
        ///     Get Volume from KilocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilocubicFeet(decimal kilocubicfeet)
        {
            decimal value = (decimal) kilocubicfeet;
            return new Volume(value, VolumeUnit.KilocubicFoot);
        }
        /// <summary>
        ///     Get Volume from KilocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilocubicMeters(decimal kilocubicmeters)
        {
            decimal value = (decimal) kilocubicmeters;
            return new Volume(value, VolumeUnit.KilocubicMeter);
        }
        /// <summary>
        ///     Get Volume from KiloimperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKiloimperialGallons(decimal kiloimperialgallons)
        {
            decimal value = (decimal) kiloimperialgallons;
            return new Volume(value, VolumeUnit.KiloimperialGallon);
        }
        /// <summary>
        ///     Get Volume from Kiloliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKiloliters(decimal kiloliters)
        {
            decimal value = (decimal) kiloliters;
            return new Volume(value, VolumeUnit.Kiloliter);
        }
        /// <summary>
        ///     Get Volume from KilousGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilousGallons(decimal kilousgallons)
        {
            decimal value = (decimal) kilousgallons;
            return new Volume(value, VolumeUnit.KilousGallon);
        }
        /// <summary>
        ///     Get Volume from Liters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromLiters(decimal liters)
        {
            decimal value = (decimal) liters;
            return new Volume(value, VolumeUnit.Liter);
        }
        /// <summary>
        ///     Get Volume from MegacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegacubicFeet(decimal megacubicfeet)
        {
            decimal value = (decimal) megacubicfeet;
            return new Volume(value, VolumeUnit.MegacubicFoot);
        }
        /// <summary>
        ///     Get Volume from MegaimperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegaimperialGallons(decimal megaimperialgallons)
        {
            decimal value = (decimal) megaimperialgallons;
            return new Volume(value, VolumeUnit.MegaimperialGallon);
        }
        /// <summary>
        ///     Get Volume from Megaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegaliters(decimal megaliters)
        {
            decimal value = (decimal) megaliters;
            return new Volume(value, VolumeUnit.Megaliter);
        }
        /// <summary>
        ///     Get Volume from MegausGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegausGallons(decimal megausgallons)
        {
            decimal value = (decimal) megausgallons;
            return new Volume(value, VolumeUnit.MegausGallon);
        }
        /// <summary>
        ///     Get Volume from MetricCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMetricCups(decimal metriccups)
        {
            decimal value = (decimal) metriccups;
            return new Volume(value, VolumeUnit.MetricCup);
        }
        /// <summary>
        ///     Get Volume from MetricTeaspoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMetricTeaspoons(decimal metricteaspoons)
        {
            decimal value = (decimal) metricteaspoons;
            return new Volume(value, VolumeUnit.MetricTeaspoon);
        }
        /// <summary>
        ///     Get Volume from Microliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMicroliters(decimal microliters)
        {
            decimal value = (decimal) microliters;
            return new Volume(value, VolumeUnit.Microliter);
        }
        /// <summary>
        ///     Get Volume from Milliliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMilliliters(decimal milliliters)
        {
            decimal value = (decimal) milliliters;
            return new Volume(value, VolumeUnit.Milliliter);
        }
        /// <summary>
        ///     Get Volume from OilBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromOilBarrels(decimal oilbarrels)
        {
            decimal value = (decimal) oilbarrels;
            return new Volume(value, VolumeUnit.OilBarrel);
        }
        /// <summary>
        ///     Get Volume from UkTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUkTablespoons(decimal uktablespoons)
        {
            decimal value = (decimal) uktablespoons;
            return new Volume(value, VolumeUnit.UkTablespoon);
        }
        /// <summary>
        ///     Get Volume from UsBeerBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsBeerBarrels(decimal usbeerbarrels)
        {
            decimal value = (decimal) usbeerbarrels;
            return new Volume(value, VolumeUnit.UsBeerBarrel);
        }
        /// <summary>
        ///     Get Volume from UsCustomaryCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsCustomaryCups(decimal uscustomarycups)
        {
            decimal value = (decimal) uscustomarycups;
            return new Volume(value, VolumeUnit.UsCustomaryCup);
        }
        /// <summary>
        ///     Get Volume from UsGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsGallons(decimal usgallons)
        {
            decimal value = (decimal) usgallons;
            return new Volume(value, VolumeUnit.UsGallon);
        }
        /// <summary>
        ///     Get Volume from UsLegalCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsLegalCups(decimal uslegalcups)
        {
            decimal value = (decimal) uslegalcups;
            return new Volume(value, VolumeUnit.UsLegalCup);
        }
        /// <summary>
        ///     Get Volume from UsOunces.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsOunces(decimal usounces)
        {
            decimal value = (decimal) usounces;
            return new Volume(value, VolumeUnit.UsOunce);
        }
        /// <summary>
        ///     Get Volume from UsPints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsPints(decimal uspints)
        {
            decimal value = (decimal) uspints;
            return new Volume(value, VolumeUnit.UsPint);
        }
        /// <summary>
        ///     Get Volume from UsQuarts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsQuarts(decimal usquarts)
        {
            decimal value = (decimal) usquarts;
            return new Volume(value, VolumeUnit.UsQuart);
        }
        /// <summary>
        ///     Get Volume from UsTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsTablespoons(decimal ustablespoons)
        {
            decimal value = (decimal) ustablespoons;
            return new Volume(value, VolumeUnit.UsTablespoon);
        }
        /// <summary>
        ///     Get Volume from UsTeaspoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsTeaspoons(decimal usteaspoons)
        {
            decimal value = (decimal) usteaspoons;
            return new Volume(value, VolumeUnit.UsTeaspoon);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Volume From(decimal value, VolumeUnit fromUnit)
        {
            return new Volume((decimal)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Volume Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Volume Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Volume, VolumeUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Volume result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Volume result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Volume, VolumeUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static VolumeUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<VolumeUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out VolumeUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out VolumeUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<VolumeUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Volume objVolume)) throw new ArgumentException("Expected type Volume.", nameof(obj));

            return CompareTo(objVolume);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Volume other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Volume objVolume))
                return false;

            return Equals(objVolume);
        }

        public bool Equals(Volume other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Volume within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Volume other, decimal tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            decimal thisValue = (decimal)this.Value;
            decimal otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Volume.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        decimal IQuantity.As(object unit) => As((VolumeUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public decimal As(VolumeUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDecimal(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDecimal(converted);
        }

        /// <summary>
        ///     Converts this Volume to another Volume with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Volume with the specified unit.</returns>
        public Volume ToUnit(VolumeUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Volume(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private decimal AsBaseUnit()
        {
            switch(Unit)
            {
                case VolumeUnit.AcreFoot: return _value/0.000810714m;
                case VolumeUnit.AuTablespoon: return _value*2e-5m;
                case VolumeUnit.BoardFoot: return _value*2.3597372158e-3m;
                case VolumeUnit.Centiliter: return (_value/1e3m) * 1e-2m;
                case VolumeUnit.CubicCentimeter: return _value/1e6m;
                case VolumeUnit.CubicDecimeter: return _value/1e3m;
                case VolumeUnit.CubicFoot: return _value*0.0283168m;
                case VolumeUnit.CubicHectometer: return _value*1e6m;
                case VolumeUnit.CubicInch: return _value*1.6387m*1e-5m;
                case VolumeUnit.CubicKilometer: return _value*1e9m;
                case VolumeUnit.CubicMeter: return _value;
                case VolumeUnit.CubicMicrometer: return _value/1e18m;
                case VolumeUnit.CubicMile: return _value*4.16818182544058e9m;
                case VolumeUnit.CubicMillimeter: return _value/1e9m;
                case VolumeUnit.CubicYard: return _value*0.764554858m;
                case VolumeUnit.DecausGallon: return (_value*0.00378541m) * 1e1m;
                case VolumeUnit.Deciliter: return (_value/1e3m) * 1e-1m;
                case VolumeUnit.DeciusGallon: return (_value*0.00378541m) * 1e-1m;
                case VolumeUnit.HectocubicFoot: return (_value*0.0283168m) * 1e2m;
                case VolumeUnit.HectocubicMeter: return (_value) * 1e2m;
                case VolumeUnit.Hectoliter: return (_value/1e3m) * 1e2m;
                case VolumeUnit.HectousGallon: return (_value*0.00378541m) * 1e2m;
                case VolumeUnit.ImperialBeerBarrel: return _value*0.16365924m;
                case VolumeUnit.ImperialGallon: return _value*0.00454609000000181429905810072407m;
                case VolumeUnit.ImperialOunce: return _value*2.8413062499962901241875439064617e-5m;
                case VolumeUnit.ImperialPint: return _value * 5.6826125e-4m;
                case VolumeUnit.KilocubicFoot: return (_value*0.0283168m) * 1e3m;
                case VolumeUnit.KilocubicMeter: return (_value) * 1e3m;
                case VolumeUnit.KiloimperialGallon: return (_value*0.00454609000000181429905810072407m) * 1e3m;
                case VolumeUnit.Kiloliter: return (_value/1e3m) * 1e3m;
                case VolumeUnit.KilousGallon: return (_value*0.00378541m) * 1e3m;
                case VolumeUnit.Liter: return _value/1e3m;
                case VolumeUnit.MegacubicFoot: return (_value*0.0283168m) * 1e6m;
                case VolumeUnit.MegaimperialGallon: return (_value*0.00454609000000181429905810072407m) * 1e6m;
                case VolumeUnit.Megaliter: return (_value/1e3m) * 1e6m;
                case VolumeUnit.MegausGallon: return (_value*0.00378541m) * 1e6m;
                case VolumeUnit.MetricCup: return _value*0.00025m;
                case VolumeUnit.MetricTeaspoon: return _value*0.5e-5m;
                case VolumeUnit.Microliter: return (_value/1e3m) * 1e-6m;
                case VolumeUnit.Milliliter: return (_value/1e3m) * 1e-3m;
                case VolumeUnit.OilBarrel: return _value*0.158987294928m;
                case VolumeUnit.UkTablespoon: return _value*1.5e-5m;
                case VolumeUnit.UsBeerBarrel: return _value*0.1173477658m;
                case VolumeUnit.UsCustomaryCup: return _value*0.0002365882365m;
                case VolumeUnit.UsGallon: return _value*0.00378541m;
                case VolumeUnit.UsLegalCup: return _value*0.00024m;
                case VolumeUnit.UsOunce: return _value*2.957352956253760505068307980135e-5m;
                case VolumeUnit.UsPint: return _value*4.73176473e-4m;
                case VolumeUnit.UsQuart: return _value*9.46352946e-4m;
                case VolumeUnit.UsTablespoon: return _value*1.478676478125e-5m;
                case VolumeUnit.UsTeaspoon: return _value*4.92892159375e-6m;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private decimal AsBaseNumericType(VolumeUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case VolumeUnit.AcreFoot: return baseUnitValue*0.000810714m;
                case VolumeUnit.AuTablespoon: return baseUnitValue/2e-5m;
                case VolumeUnit.BoardFoot: return baseUnitValue/2.3597372158e-3m;
                case VolumeUnit.Centiliter: return (baseUnitValue*1e3m) / 1e-2m;
                case VolumeUnit.CubicCentimeter: return baseUnitValue*1e6m;
                case VolumeUnit.CubicDecimeter: return baseUnitValue*1e3m;
                case VolumeUnit.CubicFoot: return baseUnitValue/0.0283168m;
                case VolumeUnit.CubicHectometer: return baseUnitValue/1e6m;
                case VolumeUnit.CubicInch: return baseUnitValue/(1.6387m*1e-5);
                case VolumeUnit.CubicKilometer: return baseUnitValue/1e9m;
                case VolumeUnit.CubicMeter: return baseUnitValue;
                case VolumeUnit.CubicMicrometer: return baseUnitValue*1e18m;
                case VolumeUnit.CubicMile: return baseUnitValue/4.16818182544058e9m;
                case VolumeUnit.CubicMillimeter: return baseUnitValue*1e9m;
                case VolumeUnit.CubicYard: return baseUnitValue/0.764554858m;
                case VolumeUnit.DecausGallon: return (baseUnitValue/0.00378541m) / 1e1m;
                case VolumeUnit.Deciliter: return (baseUnitValue*1e3m) / 1e-1m;
                case VolumeUnit.DeciusGallon: return (baseUnitValue/0.00378541m) / 1e-1m;
                case VolumeUnit.HectocubicFoot: return (baseUnitValue/0.0283168m) / 1e2m;
                case VolumeUnit.HectocubicMeter: return (baseUnitValue) / 1e2m;
                case VolumeUnit.Hectoliter: return (baseUnitValue*1e3m) / 1e2m;
                case VolumeUnit.HectousGallon: return (baseUnitValue/0.00378541m) / 1e2m;
                case VolumeUnit.ImperialBeerBarrel: return baseUnitValue/0.16365924m;
                case VolumeUnit.ImperialGallon: return baseUnitValue/0.00454609000000181429905810072407m;
                case VolumeUnit.ImperialOunce: return baseUnitValue/2.8413062499962901241875439064617e-5m;
                case VolumeUnit.ImperialPint: return baseUnitValue / 5.6826125e-4m;
                case VolumeUnit.KilocubicFoot: return (baseUnitValue/0.0283168m) / 1e3m;
                case VolumeUnit.KilocubicMeter: return (baseUnitValue) / 1e3m;
                case VolumeUnit.KiloimperialGallon: return (baseUnitValue/0.00454609000000181429905810072407m) / 1e3m;
                case VolumeUnit.Kiloliter: return (baseUnitValue*1e3m) / 1e3m;
                case VolumeUnit.KilousGallon: return (baseUnitValue/0.00378541m) / 1e3m;
                case VolumeUnit.Liter: return baseUnitValue*1e3m;
                case VolumeUnit.MegacubicFoot: return (baseUnitValue/0.0283168m) / 1e6m;
                case VolumeUnit.MegaimperialGallon: return (baseUnitValue/0.00454609000000181429905810072407m) / 1e6m;
                case VolumeUnit.Megaliter: return (baseUnitValue*1e3m) / 1e6m;
                case VolumeUnit.MegausGallon: return (baseUnitValue/0.00378541m) / 1e6m;
                case VolumeUnit.MetricCup: return baseUnitValue/0.00025m;
                case VolumeUnit.MetricTeaspoon: return baseUnitValue/0.5e-5m;
                case VolumeUnit.Microliter: return (baseUnitValue*1e3m) / 1e-6m;
                case VolumeUnit.Milliliter: return (baseUnitValue*1e3m) / 1e-3m;
                case VolumeUnit.OilBarrel: return baseUnitValue/0.158987294928m;
                case VolumeUnit.UkTablespoon: return baseUnitValue/1.5e-5m;
                case VolumeUnit.UsBeerBarrel: return baseUnitValue/0.1173477658m;
                case VolumeUnit.UsCustomaryCup: return baseUnitValue/0.0002365882365m;
                case VolumeUnit.UsGallon: return baseUnitValue/0.00378541m;
                case VolumeUnit.UsLegalCup: return baseUnitValue/0.00024m;
                case VolumeUnit.UsOunce: return baseUnitValue/2.957352956253760505068307980135e-5m;
                case VolumeUnit.UsPint: return baseUnitValue/4.73176473e-4m;
                case VolumeUnit.UsQuart: return baseUnitValue/9.46352946e-4m;
                case VolumeUnit.UsTablespoon: return baseUnitValue/1.478676478125e-5m;
                case VolumeUnit.UsTeaspoon: return baseUnitValue/4.92892159375e-6m;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDecimal(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDecimal(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}

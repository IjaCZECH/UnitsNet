//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Pressure : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly decimal _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureUnit? _unit;

        static Pressure()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -2, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Pressure, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit Pascal.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Pressure()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Pressure(decimal value, PressureUnit unit)
        {
            if(unit == PressureUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = value;
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Pressure, which is Pascal. All conversions go via this value.
        /// </summary>
        public static PressureUnit BaseUnit { get; } = PressureUnit.Pascal;

        /// <summary>
        /// Represents the largest possible value of Pressure
        /// </summary>
        public static Pressure MaxValue { get; } = new Pressure(decimal.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Pressure
        /// </summary>
        public static Pressure MinValue { get; } = new Pressure(decimal.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Pressure;

        /// <summary>
        ///     All units of measurement for the Pressure quantity.
        /// </summary>
        public static PressureUnit[] Units { get; } = Enum.GetValues(typeof(PressureUnit)).Cast<PressureUnit>().Except(new PressureUnit[]{ PressureUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Pascal.
        /// </summary>
        public static Pressure Zero { get; } = new Pressure(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public decimal Value => Convert.ToDecimal(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public PressureUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Pressure.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Pressure.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Pressure in Atmospheres.
        /// </summary>
        public decimal Atmospheres => As(PressureUnit.Atmosphere);

        /// <summary>
        ///     Get Pressure in Bars.
        /// </summary>
        public decimal Bars => As(PressureUnit.Bar);

        /// <summary>
        ///     Get Pressure in Centibars.
        /// </summary>
        public decimal Centibars => As(PressureUnit.Centibar);

        /// <summary>
        ///     Get Pressure in Decapascals.
        /// </summary>
        public decimal Decapascals => As(PressureUnit.Decapascal);

        /// <summary>
        ///     Get Pressure in Decibars.
        /// </summary>
        public decimal Decibars => As(PressureUnit.Decibar);

        /// <summary>
        ///     Get Pressure in DynesPerSquareCentimeter.
        /// </summary>
        public decimal DynesPerSquareCentimeter => As(PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in FeetOfHead.
        /// </summary>
        public decimal FeetOfHead => As(PressureUnit.FootOfHead);

        /// <summary>
        ///     Get Pressure in Gigapascals.
        /// </summary>
        public decimal Gigapascals => As(PressureUnit.Gigapascal);

        /// <summary>
        ///     Get Pressure in Hectopascals.
        /// </summary>
        public decimal Hectopascals => As(PressureUnit.Hectopascal);

        /// <summary>
        ///     Get Pressure in InchesOfMercury.
        /// </summary>
        public decimal InchesOfMercury => As(PressureUnit.InchOfMercury);

        /// <summary>
        ///     Get Pressure in InchesOfWaterColumn.
        /// </summary>
        public decimal InchesOfWaterColumn => As(PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Get Pressure in Kilobars.
        /// </summary>
        public decimal Kilobars => As(PressureUnit.Kilobar);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareCentimeter.
        /// </summary>
        public decimal KilogramsForcePerSquareCentimeter => As(PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareMeter.
        /// </summary>
        public decimal KilogramsForcePerSquareMeter => As(PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareMillimeter.
        /// </summary>
        public decimal KilogramsForcePerSquareMillimeter => As(PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareCentimeter.
        /// </summary>
        public decimal KilonewtonsPerSquareCentimeter => As(PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareMeter.
        /// </summary>
        public decimal KilonewtonsPerSquareMeter => As(PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareMillimeter.
        /// </summary>
        public decimal KilonewtonsPerSquareMillimeter => As(PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Kilopascals.
        /// </summary>
        public decimal Kilopascals => As(PressureUnit.Kilopascal);

        /// <summary>
        ///     Get Pressure in KilopoundsForcePerSquareFoot.
        /// </summary>
        public decimal KilopoundsForcePerSquareFoot => As(PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in KilopoundsForcePerSquareInch.
        /// </summary>
        public decimal KilopoundsForcePerSquareInch => As(PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Megabars.
        /// </summary>
        public decimal Megabars => As(PressureUnit.Megabar);

        /// <summary>
        ///     Get Pressure in MeganewtonsPerSquareMeter.
        /// </summary>
        public decimal MeganewtonsPerSquareMeter => As(PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in Megapascals.
        /// </summary>
        public decimal Megapascals => As(PressureUnit.Megapascal);

        /// <summary>
        ///     Get Pressure in MetersOfHead.
        /// </summary>
        public decimal MetersOfHead => As(PressureUnit.MeterOfHead);

        /// <summary>
        ///     Get Pressure in Microbars.
        /// </summary>
        public decimal Microbars => As(PressureUnit.Microbar);

        /// <summary>
        ///     Get Pressure in Micropascals.
        /// </summary>
        public decimal Micropascals => As(PressureUnit.Micropascal);

        /// <summary>
        ///     Get Pressure in Millibars.
        /// </summary>
        public decimal Millibars => As(PressureUnit.Millibar);

        /// <summary>
        ///     Get Pressure in MillimetersOfMercury.
        /// </summary>
        public decimal MillimetersOfMercury => As(PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Get Pressure in Millipascals.
        /// </summary>
        public decimal Millipascals => As(PressureUnit.Millipascal);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareCentimeter.
        /// </summary>
        public decimal NewtonsPerSquareCentimeter => As(PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareMeter.
        /// </summary>
        public decimal NewtonsPerSquareMeter => As(PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareMillimeter.
        /// </summary>
        public decimal NewtonsPerSquareMillimeter => As(PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Pascals.
        /// </summary>
        public decimal Pascals => As(PressureUnit.Pascal);

        /// <summary>
        ///     Get Pressure in PoundsForcePerSquareFoot.
        /// </summary>
        public decimal PoundsForcePerSquareFoot => As(PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in PoundsForcePerSquareInch.
        /// </summary>
        public decimal PoundsForcePerSquareInch => As(PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in PoundsPerInchSecondSquared.
        /// </summary>
        public decimal PoundsPerInchSecondSquared => As(PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Get Pressure in TechnicalAtmospheres.
        /// </summary>
        public decimal TechnicalAtmospheres => As(PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareCentimeter.
        /// </summary>
        public decimal TonnesForcePerSquareCentimeter => As(PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareMeter.
        /// </summary>
        public decimal TonnesForcePerSquareMeter => As(PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareMillimeter.
        /// </summary>
        public decimal TonnesForcePerSquareMillimeter => As(PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Torrs.
        /// </summary>
        public decimal Torrs => As(PressureUnit.Torr);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PressureUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(PressureUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Pressure from Atmospheres.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAtmospheres(decimal atmospheres)
        {
            decimal value = (decimal) atmospheres;
            return new Pressure(value, PressureUnit.Atmosphere);
        }
        /// <summary>
        ///     Get Pressure from Bars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromBars(decimal bars)
        {
            decimal value = (decimal) bars;
            return new Pressure(value, PressureUnit.Bar);
        }
        /// <summary>
        ///     Get Pressure from Centibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromCentibars(decimal centibars)
        {
            decimal value = (decimal) centibars;
            return new Pressure(value, PressureUnit.Centibar);
        }
        /// <summary>
        ///     Get Pressure from Decapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecapascals(decimal decapascals)
        {
            decimal value = (decimal) decapascals;
            return new Pressure(value, PressureUnit.Decapascal);
        }
        /// <summary>
        ///     Get Pressure from Decibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecibars(decimal decibars)
        {
            decimal value = (decimal) decibars;
            return new Pressure(value, PressureUnit.Decibar);
        }
        /// <summary>
        ///     Get Pressure from DynesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDynesPerSquareCentimeter(decimal dynespersquarecentimeter)
        {
            decimal value = (decimal) dynespersquarecentimeter;
            return new Pressure(value, PressureUnit.DynePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from FeetOfHead.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFeetOfHead(decimal feetofhead)
        {
            decimal value = (decimal) feetofhead;
            return new Pressure(value, PressureUnit.FootOfHead);
        }
        /// <summary>
        ///     Get Pressure from Gigapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromGigapascals(decimal gigapascals)
        {
            decimal value = (decimal) gigapascals;
            return new Pressure(value, PressureUnit.Gigapascal);
        }
        /// <summary>
        ///     Get Pressure from Hectopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromHectopascals(decimal hectopascals)
        {
            decimal value = (decimal) hectopascals;
            return new Pressure(value, PressureUnit.Hectopascal);
        }
        /// <summary>
        ///     Get Pressure from InchesOfMercury.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromInchesOfMercury(decimal inchesofmercury)
        {
            decimal value = (decimal) inchesofmercury;
            return new Pressure(value, PressureUnit.InchOfMercury);
        }
        /// <summary>
        ///     Get Pressure from InchesOfWaterColumn.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromInchesOfWaterColumn(decimal inchesofwatercolumn)
        {
            decimal value = (decimal) inchesofwatercolumn;
            return new Pressure(value, PressureUnit.InchOfWaterColumn);
        }
        /// <summary>
        ///     Get Pressure from Kilobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilobars(decimal kilobars)
        {
            decimal value = (decimal) kilobars;
            return new Pressure(value, PressureUnit.Kilobar);
        }
        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareCentimeter(decimal kilogramsforcepersquarecentimeter)
        {
            decimal value = (decimal) kilogramsforcepersquarecentimeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareMeter(decimal kilogramsforcepersquaremeter)
        {
            decimal value = (decimal) kilogramsforcepersquaremeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareMillimeter(decimal kilogramsforcepersquaremillimeter)
        {
            decimal value = (decimal) kilogramsforcepersquaremillimeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareCentimeter(decimal kilonewtonspersquarecentimeter)
        {
            decimal value = (decimal) kilonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareMeter(decimal kilonewtonspersquaremeter)
        {
            decimal value = (decimal) kilonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareMillimeter(decimal kilonewtonspersquaremillimeter)
        {
            decimal value = (decimal) kilonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Kilopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopascals(decimal kilopascals)
        {
            decimal value = (decimal) kilopascals;
            return new Pressure(value, PressureUnit.Kilopascal);
        }
        /// <summary>
        ///     Get Pressure from KilopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopoundsForcePerSquareFoot(decimal kilopoundsforcepersquarefoot)
        {
            decimal value = (decimal) kilopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.KilopoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from KilopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopoundsForcePerSquareInch(decimal kilopoundsforcepersquareinch)
        {
            decimal value = (decimal) kilopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.KilopoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Megabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMegabars(decimal megabars)
        {
            decimal value = (decimal) megabars;
            return new Pressure(value, PressureUnit.Megabar);
        }
        /// <summary>
        ///     Get Pressure from MeganewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMeganewtonsPerSquareMeter(decimal meganewtonspersquaremeter)
        {
            decimal value = (decimal) meganewtonspersquaremeter;
            return new Pressure(value, PressureUnit.MeganewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from Megapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMegapascals(decimal megapascals)
        {
            decimal value = (decimal) megapascals;
            return new Pressure(value, PressureUnit.Megapascal);
        }
        /// <summary>
        ///     Get Pressure from MetersOfHead.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMetersOfHead(decimal metersofhead)
        {
            decimal value = (decimal) metersofhead;
            return new Pressure(value, PressureUnit.MeterOfHead);
        }
        /// <summary>
        ///     Get Pressure from Microbars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicrobars(decimal microbars)
        {
            decimal value = (decimal) microbars;
            return new Pressure(value, PressureUnit.Microbar);
        }
        /// <summary>
        ///     Get Pressure from Micropascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicropascals(decimal micropascals)
        {
            decimal value = (decimal) micropascals;
            return new Pressure(value, PressureUnit.Micropascal);
        }
        /// <summary>
        ///     Get Pressure from Millibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillibars(decimal millibars)
        {
            decimal value = (decimal) millibars;
            return new Pressure(value, PressureUnit.Millibar);
        }
        /// <summary>
        ///     Get Pressure from MillimetersOfMercury.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillimetersOfMercury(decimal millimetersofmercury)
        {
            decimal value = (decimal) millimetersofmercury;
            return new Pressure(value, PressureUnit.MillimeterOfMercury);
        }
        /// <summary>
        ///     Get Pressure from Millipascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillipascals(decimal millipascals)
        {
            decimal value = (decimal) millipascals;
            return new Pressure(value, PressureUnit.Millipascal);
        }
        /// <summary>
        ///     Get Pressure from NewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareCentimeter(decimal newtonspersquarecentimeter)
        {
            decimal value = (decimal) newtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from NewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareMeter(decimal newtonspersquaremeter)
        {
            decimal value = (decimal) newtonspersquaremeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from NewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareMillimeter(decimal newtonspersquaremillimeter)
        {
            decimal value = (decimal) newtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Pascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPascals(decimal pascals)
        {
            decimal value = (decimal) pascals;
            return new Pressure(value, PressureUnit.Pascal);
        }
        /// <summary>
        ///     Get Pressure from PoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPoundsForcePerSquareFoot(decimal poundsforcepersquarefoot)
        {
            decimal value = (decimal) poundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.PoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from PoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPoundsForcePerSquareInch(decimal poundsforcepersquareinch)
        {
            decimal value = (decimal) poundsforcepersquareinch;
            return new Pressure(value, PressureUnit.PoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from PoundsPerInchSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPoundsPerInchSecondSquared(decimal poundsperinchsecondsquared)
        {
            decimal value = (decimal) poundsperinchsecondsquared;
            return new Pressure(value, PressureUnit.PoundPerInchSecondSquared);
        }
        /// <summary>
        ///     Get Pressure from TechnicalAtmospheres.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTechnicalAtmospheres(decimal technicalatmospheres)
        {
            decimal value = (decimal) technicalatmospheres;
            return new Pressure(value, PressureUnit.TechnicalAtmosphere);
        }
        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareCentimeter(decimal tonnesforcepersquarecentimeter)
        {
            decimal value = (decimal) tonnesforcepersquarecentimeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareMeter(decimal tonnesforcepersquaremeter)
        {
            decimal value = (decimal) tonnesforcepersquaremeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareMillimeter(decimal tonnesforcepersquaremillimeter)
        {
            decimal value = (decimal) tonnesforcepersquaremillimeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Torrs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTorrs(decimal torrs)
        {
            decimal value = (decimal) torrs;
            return new Pressure(value, PressureUnit.Torr);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureUnit" /> to <see cref="Pressure" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Pressure unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Pressure From(decimal value, PressureUnit fromUnit)
        {
            return new Pressure((decimal)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Pressure Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Pressure Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Pressure, PressureUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Pressure result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Pressure result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Pressure, PressureUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static PressureUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<PressureUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out PressureUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out PressureUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<PressureUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Pressure objPressure)) throw new ArgumentException("Expected type Pressure.", nameof(obj));

            return CompareTo(objPressure);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Pressure other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Pressure objPressure))
                return false;

            return Equals(objPressure);
        }

        public bool Equals(Pressure other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Pressure within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Pressure other, decimal tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            decimal thisValue = (decimal)this.Value;
            decimal otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Pressure.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        decimal IQuantity.As(object unit) => As((PressureUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public decimal As(PressureUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDecimal(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDecimal(converted);
        }

        /// <summary>
        ///     Converts this Pressure to another Pressure with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Pressure with the specified unit.</returns>
        public Pressure ToUnit(PressureUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Pressure(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private decimal AsBaseUnit()
        {
            switch(Unit)
            {
                case PressureUnit.Atmosphere: return _value*1.01325m*1e5m;
                case PressureUnit.Bar: return _value*1e5m;
                case PressureUnit.Centibar: return (_value*1e5m) * 1e-2m;
                case PressureUnit.Decapascal: return (_value) * 1e1m;
                case PressureUnit.Decibar: return (_value*1e5m) * 1e-1m;
                case PressureUnit.DynePerSquareCentimeter: return _value*1.0e-1m;
                case PressureUnit.FootOfHead: return _value*2989.0669m;
                case PressureUnit.Gigapascal: return (_value) * 1e9m;
                case PressureUnit.Hectopascal: return (_value) * 1e2m;
                case PressureUnit.InchOfMercury: return _value/2.95299830714159e-4m;
                case PressureUnit.InchOfWaterColumn: return _value*249.08890833333m;
                case PressureUnit.Kilobar: return (_value*1e5m) * 1e3m;
                case PressureUnit.KilogramForcePerSquareCentimeter: return _value*9.80665e4m;
                case PressureUnit.KilogramForcePerSquareMeter: return _value*9.80665019960652m;
                case PressureUnit.KilogramForcePerSquareMillimeter: return _value*9.80665e6m;
                case PressureUnit.KilonewtonPerSquareCentimeter: return (_value*1e4m) * 1e3m;
                case PressureUnit.KilonewtonPerSquareMeter: return (_value) * 1e3m;
                case PressureUnit.KilonewtonPerSquareMillimeter: return (_value*1e6m) * 1e3m;
                case PressureUnit.Kilopascal: return (_value) * 1e3m;
                case PressureUnit.KilopoundForcePerSquareFoot: return (_value*4.788025898033584e1m) * 1e3m;
                case PressureUnit.KilopoundForcePerSquareInch: return (_value*6.894757293168361e3m) * 1e3m;
                case PressureUnit.Megabar: return (_value*1e5m) * 1e6m;
                case PressureUnit.MeganewtonPerSquareMeter: return (_value) * 1e6m;
                case PressureUnit.Megapascal: return (_value) * 1e6m;
                case PressureUnit.MeterOfHead: return _value*9804.139432m;
                case PressureUnit.Microbar: return (_value*1e5m) * 1e-6m;
                case PressureUnit.Micropascal: return (_value) * 1e-6m;
                case PressureUnit.Millibar: return (_value*1e5m) * 1e-3m;
                case PressureUnit.MillimeterOfMercury: return _value/7.50061561302643e-3m;
                case PressureUnit.Millipascal: return (_value) * 1e-3m;
                case PressureUnit.NewtonPerSquareCentimeter: return _value*1e4m;
                case PressureUnit.NewtonPerSquareMeter: return _value;
                case PressureUnit.NewtonPerSquareMillimeter: return _value*1e6m;
                case PressureUnit.Pascal: return _value;
                case PressureUnit.PoundForcePerSquareFoot: return _value*4.788025898033584e1m;
                case PressureUnit.PoundForcePerSquareInch: return _value*6.894757293168361e3m;
                case PressureUnit.PoundPerInchSecondSquared: return _value*1.785796732283465e1m;
                case PressureUnit.TechnicalAtmosphere: return _value*9.80680592331m*1e4m;
                case PressureUnit.TonneForcePerSquareCentimeter: return _value*9.80665e7m;
                case PressureUnit.TonneForcePerSquareMeter: return _value*9.80665e3m;
                case PressureUnit.TonneForcePerSquareMillimeter: return _value*9.80665e9m;
                case PressureUnit.Torr: return _value*1.3332266752m*1e2m;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private decimal AsBaseNumericType(PressureUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case PressureUnit.Atmosphere: return baseUnitValue/(1.01325m*1e5);
                case PressureUnit.Bar: return baseUnitValue/1e5m;
                case PressureUnit.Centibar: return (baseUnitValue/1e5m) / 1e-2m;
                case PressureUnit.Decapascal: return (baseUnitValue) / 1e1m;
                case PressureUnit.Decibar: return (baseUnitValue/1e5m) / 1e-1m;
                case PressureUnit.DynePerSquareCentimeter: return baseUnitValue/1.0e-1m;
                case PressureUnit.FootOfHead: return baseUnitValue*0.000334552565551m;
                case PressureUnit.Gigapascal: return (baseUnitValue) / 1e9m;
                case PressureUnit.Hectopascal: return (baseUnitValue) / 1e2m;
                case PressureUnit.InchOfMercury: return baseUnitValue*2.95299830714159e-4m;
                case PressureUnit.InchOfWaterColumn: return baseUnitValue/249.08890833333m;
                case PressureUnit.Kilobar: return (baseUnitValue/1e5m) / 1e3m;
                case PressureUnit.KilogramForcePerSquareCentimeter: return baseUnitValue/9.80665e4m;
                case PressureUnit.KilogramForcePerSquareMeter: return baseUnitValue*0.101971619222242m;
                case PressureUnit.KilogramForcePerSquareMillimeter: return baseUnitValue/9.80665e6m;
                case PressureUnit.KilonewtonPerSquareCentimeter: return (baseUnitValue/1e4m) / 1e3m;
                case PressureUnit.KilonewtonPerSquareMeter: return (baseUnitValue) / 1e3m;
                case PressureUnit.KilonewtonPerSquareMillimeter: return (baseUnitValue/1e6m) / 1e3m;
                case PressureUnit.Kilopascal: return (baseUnitValue) / 1e3m;
                case PressureUnit.KilopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1m) / 1e3m;
                case PressureUnit.KilopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3m) / 1e3m;
                case PressureUnit.Megabar: return (baseUnitValue/1e5m) / 1e6m;
                case PressureUnit.MeganewtonPerSquareMeter: return (baseUnitValue) / 1e6m;
                case PressureUnit.Megapascal: return (baseUnitValue) / 1e6m;
                case PressureUnit.MeterOfHead: return baseUnitValue*0.0001019977334m;
                case PressureUnit.Microbar: return (baseUnitValue/1e5m) / 1e-6m;
                case PressureUnit.Micropascal: return (baseUnitValue) / 1e-6m;
                case PressureUnit.Millibar: return (baseUnitValue/1e5m) / 1e-3m;
                case PressureUnit.MillimeterOfMercury: return baseUnitValue*7.50061561302643e-3m;
                case PressureUnit.Millipascal: return (baseUnitValue) / 1e-3m;
                case PressureUnit.NewtonPerSquareCentimeter: return baseUnitValue/1e4m;
                case PressureUnit.NewtonPerSquareMeter: return baseUnitValue;
                case PressureUnit.NewtonPerSquareMillimeter: return baseUnitValue/1e6m;
                case PressureUnit.Pascal: return baseUnitValue;
                case PressureUnit.PoundForcePerSquareFoot: return baseUnitValue/4.788025898033584e1m;
                case PressureUnit.PoundForcePerSquareInch: return baseUnitValue/6.894757293168361e3m;
                case PressureUnit.PoundPerInchSecondSquared: return baseUnitValue/1.785796732283465e1m;
                case PressureUnit.TechnicalAtmosphere: return baseUnitValue/(9.80680592331m*1e4);
                case PressureUnit.TonneForcePerSquareCentimeter: return baseUnitValue/9.80665e7m;
                case PressureUnit.TonneForcePerSquareMeter: return baseUnitValue/9.80665e3m;
                case PressureUnit.TonneForcePerSquareMillimeter: return baseUnitValue/9.80665e9m;
                case PressureUnit.Torr: return baseUnitValue/(1.3332266752m*1e2);
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDecimal(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDecimal(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The magnitude of torque per unit length.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class TorquePerLength : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly decimal _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly TorquePerLengthUnit? _unit;

        static TorquePerLength()
        {
            BaseDimensions = new BaseDimensions(1, 1, -2, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.TorquePerLength, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit NewtonMeterPerMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public TorquePerLength()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private TorquePerLength(decimal value, TorquePerLengthUnit unit)
        {
            if(unit == TorquePerLengthUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = value;
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of TorquePerLength, which is NewtonMeterPerMeter. All conversions go via this value.
        /// </summary>
        public static TorquePerLengthUnit BaseUnit { get; } = TorquePerLengthUnit.NewtonMeterPerMeter;

        /// <summary>
        /// Represents the largest possible value of TorquePerLength
        /// </summary>
        public static TorquePerLength MaxValue { get; } = new TorquePerLength(decimal.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of TorquePerLength
        /// </summary>
        public static TorquePerLength MinValue { get; } = new TorquePerLength(decimal.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.TorquePerLength;

        /// <summary>
        ///     All units of measurement for the TorquePerLength quantity.
        /// </summary>
        public static TorquePerLengthUnit[] Units { get; } = Enum.GetValues(typeof(TorquePerLengthUnit)).Cast<TorquePerLengthUnit>().Except(new TorquePerLengthUnit[]{ TorquePerLengthUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit NewtonMeterPerMeter.
        /// </summary>
        public static TorquePerLength Zero { get; } = new TorquePerLength(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public decimal Value => Convert.ToDecimal(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public TorquePerLengthUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => TorquePerLength.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => TorquePerLength.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get TorquePerLength in KilogramForceCentimetersPerMeter.
        /// </summary>
        public decimal KilogramForceCentimetersPerMeter => As(TorquePerLengthUnit.KilogramForceCentimeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in KilogramForceMetersPerMeter.
        /// </summary>
        public decimal KilogramForceMetersPerMeter => As(TorquePerLengthUnit.KilogramForceMeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in KilogramForceMillimetersPerMeter.
        /// </summary>
        public decimal KilogramForceMillimetersPerMeter => As(TorquePerLengthUnit.KilogramForceMillimeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in KilonewtonCentimetersPerMeter.
        /// </summary>
        public decimal KilonewtonCentimetersPerMeter => As(TorquePerLengthUnit.KilonewtonCentimeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in KilonewtonMetersPerMeter.
        /// </summary>
        public decimal KilonewtonMetersPerMeter => As(TorquePerLengthUnit.KilonewtonMeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in KilonewtonMillimetersPerMeter.
        /// </summary>
        public decimal KilonewtonMillimetersPerMeter => As(TorquePerLengthUnit.KilonewtonMillimeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in KilopoundForceFeetPerFoot.
        /// </summary>
        public decimal KilopoundForceFeetPerFoot => As(TorquePerLengthUnit.KilopoundForceFootPerFoot);

        /// <summary>
        ///     Get TorquePerLength in KilopoundForceInchesPerFoot.
        /// </summary>
        public decimal KilopoundForceInchesPerFoot => As(TorquePerLengthUnit.KilopoundForceInchPerFoot);

        /// <summary>
        ///     Get TorquePerLength in MeganewtonCentimetersPerMeter.
        /// </summary>
        public decimal MeganewtonCentimetersPerMeter => As(TorquePerLengthUnit.MeganewtonCentimeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in MeganewtonMetersPerMeter.
        /// </summary>
        public decimal MeganewtonMetersPerMeter => As(TorquePerLengthUnit.MeganewtonMeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in MeganewtonMillimetersPerMeter.
        /// </summary>
        public decimal MeganewtonMillimetersPerMeter => As(TorquePerLengthUnit.MeganewtonMillimeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in MegapoundForceFeetPerFoot.
        /// </summary>
        public decimal MegapoundForceFeetPerFoot => As(TorquePerLengthUnit.MegapoundForceFootPerFoot);

        /// <summary>
        ///     Get TorquePerLength in MegapoundForceInchesPerFoot.
        /// </summary>
        public decimal MegapoundForceInchesPerFoot => As(TorquePerLengthUnit.MegapoundForceInchPerFoot);

        /// <summary>
        ///     Get TorquePerLength in NewtonCentimetersPerMeter.
        /// </summary>
        public decimal NewtonCentimetersPerMeter => As(TorquePerLengthUnit.NewtonCentimeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in NewtonMetersPerMeter.
        /// </summary>
        public decimal NewtonMetersPerMeter => As(TorquePerLengthUnit.NewtonMeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in NewtonMillimetersPerMeter.
        /// </summary>
        public decimal NewtonMillimetersPerMeter => As(TorquePerLengthUnit.NewtonMillimeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in PoundForceFeetPerFoot.
        /// </summary>
        public decimal PoundForceFeetPerFoot => As(TorquePerLengthUnit.PoundForceFootPerFoot);

        /// <summary>
        ///     Get TorquePerLength in PoundForceInchesPerFoot.
        /// </summary>
        public decimal PoundForceInchesPerFoot => As(TorquePerLengthUnit.PoundForceInchPerFoot);

        /// <summary>
        ///     Get TorquePerLength in TonneForceCentimetersPerMeter.
        /// </summary>
        public decimal TonneForceCentimetersPerMeter => As(TorquePerLengthUnit.TonneForceCentimeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in TonneForceMetersPerMeter.
        /// </summary>
        public decimal TonneForceMetersPerMeter => As(TorquePerLengthUnit.TonneForceMeterPerMeter);

        /// <summary>
        ///     Get TorquePerLength in TonneForceMillimetersPerMeter.
        /// </summary>
        public decimal TonneForceMillimetersPerMeter => As(TorquePerLengthUnit.TonneForceMillimeterPerMeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(TorquePerLengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(TorquePerLengthUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get TorquePerLength from KilogramForceCentimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromKilogramForceCentimetersPerMeter(decimal kilogramforcecentimeterspermeter)
        {
            decimal value = (decimal) kilogramforcecentimeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.KilogramForceCentimeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from KilogramForceMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromKilogramForceMetersPerMeter(decimal kilogramforcemeterspermeter)
        {
            decimal value = (decimal) kilogramforcemeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.KilogramForceMeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from KilogramForceMillimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromKilogramForceMillimetersPerMeter(decimal kilogramforcemillimeterspermeter)
        {
            decimal value = (decimal) kilogramforcemillimeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.KilogramForceMillimeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from KilonewtonCentimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromKilonewtonCentimetersPerMeter(decimal kilonewtoncentimeterspermeter)
        {
            decimal value = (decimal) kilonewtoncentimeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.KilonewtonCentimeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from KilonewtonMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromKilonewtonMetersPerMeter(decimal kilonewtonmeterspermeter)
        {
            decimal value = (decimal) kilonewtonmeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.KilonewtonMeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from KilonewtonMillimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromKilonewtonMillimetersPerMeter(decimal kilonewtonmillimeterspermeter)
        {
            decimal value = (decimal) kilonewtonmillimeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.KilonewtonMillimeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from KilopoundForceFeetPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromKilopoundForceFeetPerFoot(decimal kilopoundforcefeetperfoot)
        {
            decimal value = (decimal) kilopoundforcefeetperfoot;
            return new TorquePerLength(value, TorquePerLengthUnit.KilopoundForceFootPerFoot);
        }
        /// <summary>
        ///     Get TorquePerLength from KilopoundForceInchesPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromKilopoundForceInchesPerFoot(decimal kilopoundforceinchesperfoot)
        {
            decimal value = (decimal) kilopoundforceinchesperfoot;
            return new TorquePerLength(value, TorquePerLengthUnit.KilopoundForceInchPerFoot);
        }
        /// <summary>
        ///     Get TorquePerLength from MeganewtonCentimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromMeganewtonCentimetersPerMeter(decimal meganewtoncentimeterspermeter)
        {
            decimal value = (decimal) meganewtoncentimeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.MeganewtonCentimeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from MeganewtonMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromMeganewtonMetersPerMeter(decimal meganewtonmeterspermeter)
        {
            decimal value = (decimal) meganewtonmeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.MeganewtonMeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from MeganewtonMillimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromMeganewtonMillimetersPerMeter(decimal meganewtonmillimeterspermeter)
        {
            decimal value = (decimal) meganewtonmillimeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.MeganewtonMillimeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from MegapoundForceFeetPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromMegapoundForceFeetPerFoot(decimal megapoundforcefeetperfoot)
        {
            decimal value = (decimal) megapoundforcefeetperfoot;
            return new TorquePerLength(value, TorquePerLengthUnit.MegapoundForceFootPerFoot);
        }
        /// <summary>
        ///     Get TorquePerLength from MegapoundForceInchesPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromMegapoundForceInchesPerFoot(decimal megapoundforceinchesperfoot)
        {
            decimal value = (decimal) megapoundforceinchesperfoot;
            return new TorquePerLength(value, TorquePerLengthUnit.MegapoundForceInchPerFoot);
        }
        /// <summary>
        ///     Get TorquePerLength from NewtonCentimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromNewtonCentimetersPerMeter(decimal newtoncentimeterspermeter)
        {
            decimal value = (decimal) newtoncentimeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.NewtonCentimeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from NewtonMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromNewtonMetersPerMeter(decimal newtonmeterspermeter)
        {
            decimal value = (decimal) newtonmeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.NewtonMeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from NewtonMillimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromNewtonMillimetersPerMeter(decimal newtonmillimeterspermeter)
        {
            decimal value = (decimal) newtonmillimeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.NewtonMillimeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from PoundForceFeetPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromPoundForceFeetPerFoot(decimal poundforcefeetperfoot)
        {
            decimal value = (decimal) poundforcefeetperfoot;
            return new TorquePerLength(value, TorquePerLengthUnit.PoundForceFootPerFoot);
        }
        /// <summary>
        ///     Get TorquePerLength from PoundForceInchesPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromPoundForceInchesPerFoot(decimal poundforceinchesperfoot)
        {
            decimal value = (decimal) poundforceinchesperfoot;
            return new TorquePerLength(value, TorquePerLengthUnit.PoundForceInchPerFoot);
        }
        /// <summary>
        ///     Get TorquePerLength from TonneForceCentimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromTonneForceCentimetersPerMeter(decimal tonneforcecentimeterspermeter)
        {
            decimal value = (decimal) tonneforcecentimeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.TonneForceCentimeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from TonneForceMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromTonneForceMetersPerMeter(decimal tonneforcemeterspermeter)
        {
            decimal value = (decimal) tonneforcemeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.TonneForceMeterPerMeter);
        }
        /// <summary>
        ///     Get TorquePerLength from TonneForceMillimetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static TorquePerLength FromTonneForceMillimetersPerMeter(decimal tonneforcemillimeterspermeter)
        {
            decimal value = (decimal) tonneforcemillimeterspermeter;
            return new TorquePerLength(value, TorquePerLengthUnit.TonneForceMillimeterPerMeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TorquePerLengthUnit" /> to <see cref="TorquePerLength" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>TorquePerLength unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static TorquePerLength From(decimal value, TorquePerLengthUnit fromUnit)
        {
            return new TorquePerLength((decimal)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static TorquePerLength Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static TorquePerLength Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<TorquePerLength, TorquePerLengthUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out TorquePerLength result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out TorquePerLength result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<TorquePerLength, TorquePerLengthUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TorquePerLengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static TorquePerLengthUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<TorquePerLengthUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out TorquePerLengthUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out TorquePerLengthUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<TorquePerLengthUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is TorquePerLength objTorquePerLength)) throw new ArgumentException("Expected type TorquePerLength.", nameof(obj));

            return CompareTo(objTorquePerLength);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(TorquePerLength other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is TorquePerLength objTorquePerLength))
                return false;

            return Equals(objTorquePerLength);
        }

        public bool Equals(TorquePerLength other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another TorquePerLength within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(TorquePerLength other, decimal tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            decimal thisValue = (decimal)this.Value;
            decimal otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current TorquePerLength.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        decimal IQuantity.As(object unit) => As((TorquePerLengthUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public decimal As(TorquePerLengthUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDecimal(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDecimal(converted);
        }

        /// <summary>
        ///     Converts this TorquePerLength to another TorquePerLength with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A TorquePerLength with the specified unit.</returns>
        public TorquePerLength ToUnit(TorquePerLengthUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new TorquePerLength(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private decimal AsBaseUnit()
        {
            switch(Unit)
            {
                case TorquePerLengthUnit.KilogramForceCentimeterPerMeter: return _value*0.0980665019960652m;
                case TorquePerLengthUnit.KilogramForceMeterPerMeter: return _value*9.80665019960652m;
                case TorquePerLengthUnit.KilogramForceMillimeterPerMeter: return _value*0.00980665019960652m;
                case TorquePerLengthUnit.KilonewtonCentimeterPerMeter: return (_value*0.01m) * 1e3m;
                case TorquePerLengthUnit.KilonewtonMeterPerMeter: return (_value) * 1e3m;
                case TorquePerLengthUnit.KilonewtonMillimeterPerMeter: return (_value*0.001m) * 1e3m;
                case TorquePerLengthUnit.KilopoundForceFootPerFoot: return (_value*4.44822161526m) * 1e3m;
                case TorquePerLengthUnit.KilopoundForceInchPerFoot: return (_value*0.370685147638m) * 1e3m;
                case TorquePerLengthUnit.MeganewtonCentimeterPerMeter: return (_value*0.01m) * 1e6m;
                case TorquePerLengthUnit.MeganewtonMeterPerMeter: return (_value) * 1e6m;
                case TorquePerLengthUnit.MeganewtonMillimeterPerMeter: return (_value*0.001m) * 1e6m;
                case TorquePerLengthUnit.MegapoundForceFootPerFoot: return (_value*4.44822161526m) * 1e6m;
                case TorquePerLengthUnit.MegapoundForceInchPerFoot: return (_value*0.370685147638m) * 1e6m;
                case TorquePerLengthUnit.NewtonCentimeterPerMeter: return _value*0.01m;
                case TorquePerLengthUnit.NewtonMeterPerMeter: return _value;
                case TorquePerLengthUnit.NewtonMillimeterPerMeter: return _value*0.001m;
                case TorquePerLengthUnit.PoundForceFootPerFoot: return _value*4.44822161526m;
                case TorquePerLengthUnit.PoundForceInchPerFoot: return _value*0.370685147638m;
                case TorquePerLengthUnit.TonneForceCentimeterPerMeter: return _value*98.0665019960652m;
                case TorquePerLengthUnit.TonneForceMeterPerMeter: return _value*9806.65019960653m;
                case TorquePerLengthUnit.TonneForceMillimeterPerMeter: return _value*9.80665019960652m;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private decimal AsBaseNumericType(TorquePerLengthUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case TorquePerLengthUnit.KilogramForceCentimeterPerMeter: return baseUnitValue*10.1971619222242m;
                case TorquePerLengthUnit.KilogramForceMeterPerMeter: return baseUnitValue*0.101971619222242m;
                case TorquePerLengthUnit.KilogramForceMillimeterPerMeter: return baseUnitValue*101.971619222242m;
                case TorquePerLengthUnit.KilonewtonCentimeterPerMeter: return (baseUnitValue*100m) / 1e3m;
                case TorquePerLengthUnit.KilonewtonMeterPerMeter: return (baseUnitValue) / 1e3m;
                case TorquePerLengthUnit.KilonewtonMillimeterPerMeter: return (baseUnitValue*1000m) / 1e3m;
                case TorquePerLengthUnit.KilopoundForceFootPerFoot: return (baseUnitValue/4.44822161526m) / 1e3m;
                case TorquePerLengthUnit.KilopoundForceInchPerFoot: return (baseUnitValue/0.370685147638m) / 1e3m;
                case TorquePerLengthUnit.MeganewtonCentimeterPerMeter: return (baseUnitValue*100m) / 1e6m;
                case TorquePerLengthUnit.MeganewtonMeterPerMeter: return (baseUnitValue) / 1e6m;
                case TorquePerLengthUnit.MeganewtonMillimeterPerMeter: return (baseUnitValue*1000m) / 1e6m;
                case TorquePerLengthUnit.MegapoundForceFootPerFoot: return (baseUnitValue/4.44822161526m) / 1e6m;
                case TorquePerLengthUnit.MegapoundForceInchPerFoot: return (baseUnitValue/0.370685147638m) / 1e6m;
                case TorquePerLengthUnit.NewtonCentimeterPerMeter: return baseUnitValue*100m;
                case TorquePerLengthUnit.NewtonMeterPerMeter: return baseUnitValue;
                case TorquePerLengthUnit.NewtonMillimeterPerMeter: return baseUnitValue*1000m;
                case TorquePerLengthUnit.PoundForceFootPerFoot: return baseUnitValue/4.44822161526m;
                case TorquePerLengthUnit.PoundForceInchPerFoot: return baseUnitValue/0.370685147638m;
                case TorquePerLengthUnit.TonneForceCentimeterPerMeter: return baseUnitValue*0.0101971619222242m;
                case TorquePerLengthUnit.TonneForceMeterPerMeter: return baseUnitValue*0.000101971619222242m;
                case TorquePerLengthUnit.TonneForceMillimeterPerMeter: return baseUnitValue*0.101971619222242m;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDecimal(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDecimal(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}

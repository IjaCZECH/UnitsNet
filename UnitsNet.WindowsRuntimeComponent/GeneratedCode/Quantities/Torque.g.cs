//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Torque, moment or moment of force (see the terminology below), is the tendency of a force to rotate an object about an axis,[1] fulcrum, or pivot. Just as a force is a push or a pull, a torque can be thought of as a twist to an object. Mathematically, torque is defined as the cross product of the lever-arm distance and force, which tends to produce rotation. Loosely speaking, torque is a measure of the turning force on an object such as a bolt or a flywheel. For example, pushing or pulling the handle of a wrench connected to a nut or bolt produces a torque (turning force) that loosens or tightens the nut or bolt.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Torque : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly decimal _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly TorqueUnit? _unit;

        static Torque()
        {
            BaseDimensions = new BaseDimensions(2, 1, -2, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Torque, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit NewtonMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Torque()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Torque(decimal value, TorqueUnit unit)
        {
            if(unit == TorqueUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = value;
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Torque, which is NewtonMeter. All conversions go via this value.
        /// </summary>
        public static TorqueUnit BaseUnit { get; } = TorqueUnit.NewtonMeter;

        /// <summary>
        /// Represents the largest possible value of Torque
        /// </summary>
        public static Torque MaxValue { get; } = new Torque(decimal.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Torque
        /// </summary>
        public static Torque MinValue { get; } = new Torque(decimal.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Torque;

        /// <summary>
        ///     All units of measurement for the Torque quantity.
        /// </summary>
        public static TorqueUnit[] Units { get; } = Enum.GetValues(typeof(TorqueUnit)).Cast<TorqueUnit>().Except(new TorqueUnit[]{ TorqueUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit NewtonMeter.
        /// </summary>
        public static Torque Zero { get; } = new Torque(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public decimal Value => Convert.ToDecimal(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public TorqueUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Torque.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Torque.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Torque in KilogramForceCentimeters.
        /// </summary>
        public decimal KilogramForceCentimeters => As(TorqueUnit.KilogramForceCentimeter);

        /// <summary>
        ///     Get Torque in KilogramForceMeters.
        /// </summary>
        public decimal KilogramForceMeters => As(TorqueUnit.KilogramForceMeter);

        /// <summary>
        ///     Get Torque in KilogramForceMillimeters.
        /// </summary>
        public decimal KilogramForceMillimeters => As(TorqueUnit.KilogramForceMillimeter);

        /// <summary>
        ///     Get Torque in KilonewtonCentimeters.
        /// </summary>
        public decimal KilonewtonCentimeters => As(TorqueUnit.KilonewtonCentimeter);

        /// <summary>
        ///     Get Torque in KilonewtonMeters.
        /// </summary>
        public decimal KilonewtonMeters => As(TorqueUnit.KilonewtonMeter);

        /// <summary>
        ///     Get Torque in KilonewtonMillimeters.
        /// </summary>
        public decimal KilonewtonMillimeters => As(TorqueUnit.KilonewtonMillimeter);

        /// <summary>
        ///     Get Torque in KilopoundForceFeet.
        /// </summary>
        public decimal KilopoundForceFeet => As(TorqueUnit.KilopoundForceFoot);

        /// <summary>
        ///     Get Torque in KilopoundForceInches.
        /// </summary>
        public decimal KilopoundForceInches => As(TorqueUnit.KilopoundForceInch);

        /// <summary>
        ///     Get Torque in MeganewtonCentimeters.
        /// </summary>
        public decimal MeganewtonCentimeters => As(TorqueUnit.MeganewtonCentimeter);

        /// <summary>
        ///     Get Torque in MeganewtonMeters.
        /// </summary>
        public decimal MeganewtonMeters => As(TorqueUnit.MeganewtonMeter);

        /// <summary>
        ///     Get Torque in MeganewtonMillimeters.
        /// </summary>
        public decimal MeganewtonMillimeters => As(TorqueUnit.MeganewtonMillimeter);

        /// <summary>
        ///     Get Torque in MegapoundForceFeet.
        /// </summary>
        public decimal MegapoundForceFeet => As(TorqueUnit.MegapoundForceFoot);

        /// <summary>
        ///     Get Torque in MegapoundForceInches.
        /// </summary>
        public decimal MegapoundForceInches => As(TorqueUnit.MegapoundForceInch);

        /// <summary>
        ///     Get Torque in NewtonCentimeters.
        /// </summary>
        public decimal NewtonCentimeters => As(TorqueUnit.NewtonCentimeter);

        /// <summary>
        ///     Get Torque in NewtonMeters.
        /// </summary>
        public decimal NewtonMeters => As(TorqueUnit.NewtonMeter);

        /// <summary>
        ///     Get Torque in NewtonMillimeters.
        /// </summary>
        public decimal NewtonMillimeters => As(TorqueUnit.NewtonMillimeter);

        /// <summary>
        ///     Get Torque in PoundalFeet.
        /// </summary>
        public decimal PoundalFeet => As(TorqueUnit.PoundalFoot);

        /// <summary>
        ///     Get Torque in PoundForceFeet.
        /// </summary>
        public decimal PoundForceFeet => As(TorqueUnit.PoundForceFoot);

        /// <summary>
        ///     Get Torque in PoundForceInches.
        /// </summary>
        public decimal PoundForceInches => As(TorqueUnit.PoundForceInch);

        /// <summary>
        ///     Get Torque in TonneForceCentimeters.
        /// </summary>
        public decimal TonneForceCentimeters => As(TorqueUnit.TonneForceCentimeter);

        /// <summary>
        ///     Get Torque in TonneForceMeters.
        /// </summary>
        public decimal TonneForceMeters => As(TorqueUnit.TonneForceMeter);

        /// <summary>
        ///     Get Torque in TonneForceMillimeters.
        /// </summary>
        public decimal TonneForceMillimeters => As(TorqueUnit.TonneForceMillimeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(TorqueUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(TorqueUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Torque from KilogramForceCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilogramForceCentimeters(decimal kilogramforcecentimeters)
        {
            decimal value = (decimal) kilogramforcecentimeters;
            return new Torque(value, TorqueUnit.KilogramForceCentimeter);
        }
        /// <summary>
        ///     Get Torque from KilogramForceMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilogramForceMeters(decimal kilogramforcemeters)
        {
            decimal value = (decimal) kilogramforcemeters;
            return new Torque(value, TorqueUnit.KilogramForceMeter);
        }
        /// <summary>
        ///     Get Torque from KilogramForceMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilogramForceMillimeters(decimal kilogramforcemillimeters)
        {
            decimal value = (decimal) kilogramforcemillimeters;
            return new Torque(value, TorqueUnit.KilogramForceMillimeter);
        }
        /// <summary>
        ///     Get Torque from KilonewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilonewtonCentimeters(decimal kilonewtoncentimeters)
        {
            decimal value = (decimal) kilonewtoncentimeters;
            return new Torque(value, TorqueUnit.KilonewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from KilonewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilonewtonMeters(decimal kilonewtonmeters)
        {
            decimal value = (decimal) kilonewtonmeters;
            return new Torque(value, TorqueUnit.KilonewtonMeter);
        }
        /// <summary>
        ///     Get Torque from KilonewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilonewtonMillimeters(decimal kilonewtonmillimeters)
        {
            decimal value = (decimal) kilonewtonmillimeters;
            return new Torque(value, TorqueUnit.KilonewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from KilopoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilopoundForceFeet(decimal kilopoundforcefeet)
        {
            decimal value = (decimal) kilopoundforcefeet;
            return new Torque(value, TorqueUnit.KilopoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from KilopoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilopoundForceInches(decimal kilopoundforceinches)
        {
            decimal value = (decimal) kilopoundforceinches;
            return new Torque(value, TorqueUnit.KilopoundForceInch);
        }
        /// <summary>
        ///     Get Torque from MeganewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromMeganewtonCentimeters(decimal meganewtoncentimeters)
        {
            decimal value = (decimal) meganewtoncentimeters;
            return new Torque(value, TorqueUnit.MeganewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from MeganewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromMeganewtonMeters(decimal meganewtonmeters)
        {
            decimal value = (decimal) meganewtonmeters;
            return new Torque(value, TorqueUnit.MeganewtonMeter);
        }
        /// <summary>
        ///     Get Torque from MeganewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromMeganewtonMillimeters(decimal meganewtonmillimeters)
        {
            decimal value = (decimal) meganewtonmillimeters;
            return new Torque(value, TorqueUnit.MeganewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from MegapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromMegapoundForceFeet(decimal megapoundforcefeet)
        {
            decimal value = (decimal) megapoundforcefeet;
            return new Torque(value, TorqueUnit.MegapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from MegapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromMegapoundForceInches(decimal megapoundforceinches)
        {
            decimal value = (decimal) megapoundforceinches;
            return new Torque(value, TorqueUnit.MegapoundForceInch);
        }
        /// <summary>
        ///     Get Torque from NewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromNewtonCentimeters(decimal newtoncentimeters)
        {
            decimal value = (decimal) newtoncentimeters;
            return new Torque(value, TorqueUnit.NewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from NewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromNewtonMeters(decimal newtonmeters)
        {
            decimal value = (decimal) newtonmeters;
            return new Torque(value, TorqueUnit.NewtonMeter);
        }
        /// <summary>
        ///     Get Torque from NewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromNewtonMillimeters(decimal newtonmillimeters)
        {
            decimal value = (decimal) newtonmillimeters;
            return new Torque(value, TorqueUnit.NewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from PoundalFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromPoundalFeet(decimal poundalfeet)
        {
            decimal value = (decimal) poundalfeet;
            return new Torque(value, TorqueUnit.PoundalFoot);
        }
        /// <summary>
        ///     Get Torque from PoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromPoundForceFeet(decimal poundforcefeet)
        {
            decimal value = (decimal) poundforcefeet;
            return new Torque(value, TorqueUnit.PoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from PoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromPoundForceInches(decimal poundforceinches)
        {
            decimal value = (decimal) poundforceinches;
            return new Torque(value, TorqueUnit.PoundForceInch);
        }
        /// <summary>
        ///     Get Torque from TonneForceCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromTonneForceCentimeters(decimal tonneforcecentimeters)
        {
            decimal value = (decimal) tonneforcecentimeters;
            return new Torque(value, TorqueUnit.TonneForceCentimeter);
        }
        /// <summary>
        ///     Get Torque from TonneForceMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromTonneForceMeters(decimal tonneforcemeters)
        {
            decimal value = (decimal) tonneforcemeters;
            return new Torque(value, TorqueUnit.TonneForceMeter);
        }
        /// <summary>
        ///     Get Torque from TonneForceMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromTonneForceMillimeters(decimal tonneforcemillimeters)
        {
            decimal value = (decimal) tonneforcemillimeters;
            return new Torque(value, TorqueUnit.TonneForceMillimeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TorqueUnit" /> to <see cref="Torque" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Torque unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Torque From(decimal value, TorqueUnit fromUnit)
        {
            return new Torque((decimal)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Torque Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Torque Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Torque, TorqueUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Torque result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Torque result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Torque, TorqueUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TorqueUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static TorqueUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<TorqueUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out TorqueUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out TorqueUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<TorqueUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Torque objTorque)) throw new ArgumentException("Expected type Torque.", nameof(obj));

            return CompareTo(objTorque);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Torque other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Torque objTorque))
                return false;

            return Equals(objTorque);
        }

        public bool Equals(Torque other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Torque within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Torque other, decimal tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            decimal thisValue = (decimal)this.Value;
            decimal otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Torque.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        decimal IQuantity.As(object unit) => As((TorqueUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public decimal As(TorqueUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDecimal(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDecimal(converted);
        }

        /// <summary>
        ///     Converts this Torque to another Torque with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Torque with the specified unit.</returns>
        public Torque ToUnit(TorqueUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Torque(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private decimal AsBaseUnit()
        {
            switch(Unit)
            {
                case TorqueUnit.KilogramForceCentimeter: return _value*0.0980665019960652m;
                case TorqueUnit.KilogramForceMeter: return _value*9.80665019960652m;
                case TorqueUnit.KilogramForceMillimeter: return _value*0.00980665019960652m;
                case TorqueUnit.KilonewtonCentimeter: return (_value*0.01m) * 1e3m;
                case TorqueUnit.KilonewtonMeter: return (_value) * 1e3m;
                case TorqueUnit.KilonewtonMillimeter: return (_value*0.001m) * 1e3m;
                case TorqueUnit.KilopoundForceFoot: return (_value*1.3558179483314m) * 1e3m;
                case TorqueUnit.KilopoundForceInch: return (_value*1.129848290276167e-1m) * 1e3m;
                case TorqueUnit.MeganewtonCentimeter: return (_value*0.01m) * 1e6m;
                case TorqueUnit.MeganewtonMeter: return (_value) * 1e6m;
                case TorqueUnit.MeganewtonMillimeter: return (_value*0.001m) * 1e6m;
                case TorqueUnit.MegapoundForceFoot: return (_value*1.3558179483314m) * 1e6m;
                case TorqueUnit.MegapoundForceInch: return (_value*1.129848290276167e-1m) * 1e6m;
                case TorqueUnit.NewtonCentimeter: return _value*0.01m;
                case TorqueUnit.NewtonMeter: return _value;
                case TorqueUnit.NewtonMillimeter: return _value*0.001m;
                case TorqueUnit.PoundalFoot: return _value*4.21401100938048e-2m;
                case TorqueUnit.PoundForceFoot: return _value*1.3558179483314m;
                case TorqueUnit.PoundForceInch: return _value*1.129848290276167e-1m;
                case TorqueUnit.TonneForceCentimeter: return _value*98.0665019960652m;
                case TorqueUnit.TonneForceMeter: return _value*9806.65019960653m;
                case TorqueUnit.TonneForceMillimeter: return _value*9.80665019960652m;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private decimal AsBaseNumericType(TorqueUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case TorqueUnit.KilogramForceCentimeter: return baseUnitValue*10.1971619222242m;
                case TorqueUnit.KilogramForceMeter: return baseUnitValue*0.101971619222242m;
                case TorqueUnit.KilogramForceMillimeter: return baseUnitValue*101.971619222242m;
                case TorqueUnit.KilonewtonCentimeter: return (baseUnitValue*100m) / 1e3m;
                case TorqueUnit.KilonewtonMeter: return (baseUnitValue) / 1e3m;
                case TorqueUnit.KilonewtonMillimeter: return (baseUnitValue*1000m) / 1e3m;
                case TorqueUnit.KilopoundForceFoot: return (baseUnitValue/1.3558179483314m) / 1e3m;
                case TorqueUnit.KilopoundForceInch: return (baseUnitValue/1.129848290276167e-1m) / 1e3m;
                case TorqueUnit.MeganewtonCentimeter: return (baseUnitValue*100m) / 1e6m;
                case TorqueUnit.MeganewtonMeter: return (baseUnitValue) / 1e6m;
                case TorqueUnit.MeganewtonMillimeter: return (baseUnitValue*1000m) / 1e6m;
                case TorqueUnit.MegapoundForceFoot: return (baseUnitValue/1.3558179483314m) / 1e6m;
                case TorqueUnit.MegapoundForceInch: return (baseUnitValue/1.129848290276167e-1m) / 1e6m;
                case TorqueUnit.NewtonCentimeter: return baseUnitValue*100m;
                case TorqueUnit.NewtonMeter: return baseUnitValue;
                case TorqueUnit.NewtonMillimeter: return baseUnitValue*1000m;
                case TorqueUnit.PoundalFoot: return baseUnitValue/4.21401100938048e-2m;
                case TorqueUnit.PoundForceFoot: return baseUnitValue/1.3558179483314m;
                case TorqueUnit.PoundForceInch: return baseUnitValue/1.129848290276167e-1m;
                case TorqueUnit.TonneForceCentimeter: return baseUnitValue*0.0101971619222242m;
                case TorqueUnit.TonneForceMeter: return baseUnitValue*0.000101971619222242m;
                case TorqueUnit.TonneForceMillimeter: return baseUnitValue*0.101971619222242m;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDecimal(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDecimal(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
